//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

// Custom Interop for invoking the Vive Eye

namespace TobiiEyeBridge
{
    using System.Runtime.InteropServices;
    
    public static partial class Native
    {
        public const string Library = "tobii_stream_engine";

        public enum Tobii_error_t : int
        {
            ErrorNoError,
            
            ErrorInternal,
            
            ErrorInsufficientLicense,
            
            ErrorNotSupported,
            
            ErrorNotAvailable,
            
            ErrorConnectionFailed,
            
            ErrorTimedOut,
            
            ErrorAllocationFailed,
            
            ErrorInvalidParameter,
            
            ErrorCalibrationAlreadyStarted,
            
            ErrorCalibrationNotStarted,
            
            ErrorAlreadySubscribed,
            
            ErrorNotSubscribed,
            
            ErrorOperationFailed,
            
            ErrorConflictingApiInstances,
            
            ErrorCalibrationBusy,
            
            ErrorCallbackInProgress,
            
            ErrorTooManySubscribers,
            
            ErrorConnectionFailedDriver,
            
            ErrorUnauthorized,
            
            ErrorFirmwareUpgradeInProgress,
        }
        
        public enum Tobii_log_level_t : int
        {
            LogLevelError,
            
            LogLevelWarn,
            
            LogLevelInfo,
            
            LogLevelDebug,
            
            LogLevelTrace,
        }
        
        public enum Tobii_field_of_use_t : int
        {
            FieldOfUseInteractive = unchecked((int)1),
            
            FieldOfUseAnalytical = unchecked((int)2),
        }
        
        public enum Tobii_state_t : int
        {
            StatePowerSaveActive,
            
            StateRemoteWakeActive,
            
            StateDevicePaused,
            
            StateExclusiveMode,
            
            StateFault,
            
            StateWarning,
            
            StateCalibrationId,
            
            StateCalibrationActive,
        }
        
        public enum Tobii_state_bool_t : int
        {
            StateBoolFalse,
            
            StateBoolTrue,
        }
        
        public enum Tobii_supported_t : int
        {
            NotSupported,
            
            Supported,
        }
        
        public enum Tobii_capability_t : int
        {
            CapabilityDisplayAreaWritable,
            
            CapabilityCalibration2d,
            
            CapabilityCalibration3d,
            
            CapabilityPersistentStorage,
            
            CapabilityCalibrationPerEye,
            
            CapabilityCompoundStreamWearable3dGazeCombined,
            
            CapabilityFaceType,
            
            CapabilityCompoundStreamUserPositionGuideXy,
            
            CapabilityCompoundStreamUserPositionGuideZ,
            
            CapabilityCompoundStreamWearableLimitedImage,
            
            CapabilityCompoundStreamWearablePupilDiameter,
            
            CapabilityCompoundStreamWearablePupilPosition,
            
            CapabilityCompoundStreamWearableEyeOpenness,
            
            CapabilityCompoundStreamWearable3dGazePerEye,
            
            CapabilityCompoundStreamWearableUserPositionGuideXy,
            
            CapabilityCompoundStreamWearableTrackingImprovements,
            
            CapabilityCompoundStreamWearableConvergenceDistance,
            
            CapabilityCompoundStreamWearableImproveUserPositionHmd,
            
            CapabilityCompoundStreamWearableIncreaseEyeRelief,
        }
        
        public enum Tobii_stream_t : int
        {
            StreamGazePoint,
            
            StreamGazeOrigin,
            
            StreamEyePositionNormalized,
            
            StreamUserPresence,
            
            StreamHeadPose,
            
            StreamGazeData,
            
            StreamDigitalSyncport,
            
            StreamDiagnosticsImage,
            
            StreamUserPositionGuide,
            
            StreamWearableConsumer,
            
            StreamWearableAdvanced,
            
            StreamWearableFoveatedGaze,
        }
        
        public enum Tobii_validity_t : int
        {
            ValidityInvalid,
            
            ValidityValid,
        }
        
        public enum Tobii_enabled_eye_t : int
        {
            EnabledEyeLeft,
            
            EnabledEyeRight,
            
            EnabledEyeBoth,
        }
        
        public enum Tobii_calibration_point_status_t : int
        {
            CalibrationPointStatusFailedOrInvalid,
            
            CalibrationPointStatusValidButNotUsedInCalibration,
            
            CalibrationPointStatusValidAndUsedInCalibration,
        }
        
        public enum Tobii_license_validation_result_t : int
        {
            LicenseValidationResultOk,
            
            LicenseValidationResultTampered,
            
            LicenseValidationResultInvalidApplicationSignature,
            
            LicenseValidationResultNonsignedApplication,
            
            LicenseValidationResultExpired,
            
            LicenseValidationResultPremature,
            
            LicenseValidationResultInvalidProcessName,
            
            LicenseValidationResultInvalidSerialNumber,
            
            LicenseValidationResultInvalidModel,
            
            LicenseValidationResultInvalidPlatformType,
        }
        
        public enum Tobii_feature_group_t : int
        {
            FeatureGroupBlocked,
            
            FeatureGroupConsumer,
            
            FeatureGroupConfig,
            
            FeatureGroupProfessional,
            
            FeatureGroupInternal,
        }
        
        public enum Tobii_user_presence_status_t : int
        {
            UserPresenceStatusUnknown,
            
            UserPresenceStatusAway,
            
            UserPresenceStatusPresent,
        }
        
        public enum Tobii_notification_type_t : int
        {
            NotificationTypeCalibrationStateChanged,
            
            NotificationTypeExclusiveModeStateChanged,
            
            NotificationTypeTrackBoxChanged,
            
            NotificationTypeDisplayAreaChanged,
            
            NotificationTypeFramerateChanged,
            
            NotificationTypePowerSaveStateChanged,
            
            NotificationTypeDevicePausedStateChanged,
            
            NotificationTypeCalibrationEnabledEyeChanged,
            
            NotificationTypeCalibrationIdChanged,
            
            NotificationTypeCombinedGazeEyeSelectionChanged,
            
            NotificationTypeFaultsChanged,
            
            NotificationTypeWarningsChanged,
            
            NotificationTypeFaceTypeChanged,
        }
        
        public enum Tobii_notification_value_type_t : int
        {
            NotificationValueTypeNone,
            
            NotificationValueTypeFloat,
            
            NotificationValueTypeState,
            
            NotificationValueTypeDisplayArea,
            
            NotificationValueTypeUint,
            
            NotificationValueTypeEnabledEye,
            
            NotificationValueTypeString,
        }
        
        public enum Tobii_lens_configuration_writable_t : int
        {
            LensConfigurationNotWritable,
            
            LensConfigurationWritable,
        }
        
        public enum Tobii_wearable_foveated_tracking_state_t : int
        {
            WearableFoveatedTrackingStateTracking,
            
            WearableFoveatedTrackingStateExtrapolated,
            
            WearableFoveatedTrackingStateLastKnown,
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Tobii_version_t
        {
            public int major;
            
            public int minor;
            
            public int revision;
            
            public int build;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Tobii_custom_log_t
        {
            public IntPtr log_context;
            
            public Native.Tobii_log_func_t log_func;
        }
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Tobii_log_func_t(IntPtr log_context, Native.Tobii_log_level_t level, [MarshalAs(UnmanagedType.LPStr)] string text);
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Tobii_custom_alloc_t
        {
            public IntPtr mem_context;
            
            public Native.Tobii_malloc_func_t malloc_func;
            
            public Native.Tobii_free_func_t free_func;
        }
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate IntPtr Tobii_malloc_func_t(IntPtr mem_context, ulong size);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Tobii_free_func_t(IntPtr mem_context, IntPtr ptr);
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Tobii_api_t : IEquatable<Tobii_api_t>
        {
            private readonly IntPtr _handle;
            
            public Tobii_api_t(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(Tobii_api_t other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is Tobii_api_t other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(Tobii_api_t left, Tobii_api_t right) => left.Equals(right);
            
            public static bool operator !=(Tobii_api_t left, Tobii_api_t right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Tobii_device_t : IEquatable<Tobii_device_t>
        {
            private readonly IntPtr _handle;
            
            public Tobii_device_t(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(Tobii_device_t other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is Tobii_device_t other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(Tobii_device_t left, Tobii_device_t right) => left.Equals(right);
            
            public static bool operator !=(Tobii_device_t left, Tobii_device_t right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Tobii_device_info_t
        {
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]
            public string serial_number;
            
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]
            public string model;
            
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]
            public string generation;
            
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]
            public string firmware_version;
            
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
            public string integration_id;
            
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
            public string hw_calibration_version;
            
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
            public string hw_calibration_date;
            
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
            public string lot_id;
            
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]
            public string integration_type;
            
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]
            public string runtime_build_version;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public unsafe partial struct Tobii_track_box_t
        {
            public fixed float front_upper_right_xyz[3];
            
            public fixed float front_upper_left_xyz[3];
            
            public fixed float front_lower_left_xyz[3];
            
            public fixed float front_lower_right_xyz[3];
            
            public fixed float back_upper_right_xyz[3];
            
            public fixed float back_upper_left_xyz[3];
            
            public fixed float back_lower_left_xyz[3];
            
            public fixed float back_lower_right_xyz[3];
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public unsafe partial struct Tobii_display_area_t
        {
            public fixed float top_left_mm_xyz[3];
            
            public fixed float top_right_mm_xyz[3];
            
            public fixed float bottom_left_mm_xyz[3];
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public unsafe partial struct Tobii_gaze_data_eye_t
        {
            public Native.Tobii_validity_t gaze_origin_validity;
            
            public fixed float gaze_origin_from_eye_tracker_mm_xyz[3];
            
            public Native.Tobii_validity_t eye_position_validity;
            
            public fixed float eye_position_in_track_box_normalized_xyz[3];
            
            public Native.Tobii_validity_t gaze_point_validity;
            
            public fixed float gaze_point_from_eye_tracker_mm_xyz[3];
            
            public fixed float gaze_point_on_display_normalized_xy[2];
            
            public Native.Tobii_validity_t eyeball_center_validity;
            
            public fixed float eyeball_center_from_eye_tracker_mm_xyz[3];
            
            public Native.Tobii_validity_t pupil_validity;
            
            public float pupil_diameter_mm;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Tobii_gaze_data_t
        {
            public long timestamp_tracker_us;
            
            public long timestamp_system_us;
            
            public Native.Tobii_gaze_data_eye_t left;
            
            public Native.Tobii_gaze_data_eye_t right;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Tobii_timesync_data_t
        {
            public long system_start_us;
            
            public long system_end_us;
            
            public long tracker_us;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public unsafe partial struct Tobii_calibration_point_data_t
        {
            public fixed float point_xy[2];
            
            public Native.Tobii_calibration_point_status_t left_status;
            
            public fixed float left_mapping_xy[2];
            
            public Native.Tobii_calibration_point_status_t right_status;
            
            public fixed float right_mapping_xy[2];
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public unsafe partial struct Tobii_geometry_mounting_t
        {
            public int guides;
            
            public float width_mm;
            
            public float angle_deg;
            
            public fixed float external_offset_mm_xyz[3];
            
            public fixed float internal_offset_mm_xyz[3];
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Tobii_license_key_t
        {
            public IntPtr license_key;
            
            public ulong size_in_bytes;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public unsafe partial struct Tobii_gaze_point_t
        {
            public long timestamp_us;
            
            public Native.Tobii_validity_t validity;
            
            public fixed float position_xy[2];
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public unsafe partial struct Tobii_gaze_origin_t
        {
            public long timestamp_us;
            
            public Native.Tobii_validity_t left_validity;
            
            public fixed float left_xyz[3];
            
            public Native.Tobii_validity_t right_validity;
            
            public fixed float right_xyz[3];
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public unsafe partial struct Tobii_eye_position_normalized_t
        {
            public long timestamp_us;
            
            public Native.Tobii_validity_t left_validity;
            
            public fixed float left_xyz[3];
            
            public Native.Tobii_validity_t right_validity;
            
            public fixed float right_xyz[3];
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public unsafe partial struct Tobii_head_pose_t
        {
            public long timestamp_us;
            
            public Native.Tobii_validity_t position_validity;
            
            public fixed float position_xyz[3];
            
            public fixed int rotation_validity_xyz[3];
            
            public fixed float rotation_xyz[3];
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Tobii_notification_t
        {
            [StructLayout(LayoutKind.Explicit, CharSet = CharSet.Ansi)]
            public partial struct Tobii_notification_t_union_value
            {
                [FieldOffset(0)]
                public float float_;
                
                [FieldOffset(0)]
                public Native.Tobii_state_bool_t state;
                
                [FieldOffset(0)]
                public Native.Tobii_display_area_t display_area;
                
                [FieldOffset(0)]
                public uint uint_;
                
                [FieldOffset(0)]
                public Native.Tobii_enabled_eye_t enabled_eye;
                
                [FieldOffset(0)]
                [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 512)]
                public string string_;
            }
            
            public Native.Tobii_notification_type_t type;
            
            public Native.Tobii_notification_value_type_t value_type;
            
            public Native.Tobii_notification_t.Tobii_notification_t_union_value value;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public unsafe partial struct Tobii_user_position_guide_t
        {
            public long timestamp_us;
            
            public Native.Tobii_validity_t left_position_validity;
            
            public fixed float left_position_normalized_xyz[3];
            
            public Native.Tobii_validity_t right_position_validity;
            
            public fixed float right_position_normalized_xyz[3];
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public unsafe partial struct Tobii_wearable_consumer_eye_t
        {
            public Native.Tobii_validity_t pupil_position_in_sensor_area_validity;
            
            public fixed float pupil_position_in_sensor_area_xy[2];
            
            public Native.Tobii_validity_t position_guide_validity;
            
            public fixed float position_guide_xy[2];
            
            public Native.Tobii_validity_t blink_validity;
            
            public Native.Tobii_state_bool_t blink;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public unsafe partial struct Tobii_wearable_consumer_data_t
        {
            public long timestamp_us;
            
            public Native.Tobii_wearable_consumer_eye_t left;
            
            public Native.Tobii_wearable_consumer_eye_t right;
            
            public Native.Tobii_validity_t gaze_origin_combined_validity;
            
            public fixed float gaze_origin_combined_mm_xyz[3];
            
            public Native.Tobii_validity_t gaze_direction_combined_validity;
            
            public fixed float gaze_direction_combined_normalized_xyz[3];
            
            public Native.Tobii_validity_t convergence_distance_validity;
            
            public float convergence_distance_mm;
            
            public Native.Tobii_state_bool_t improve_user_position_hmd;
            
            public Native.Tobii_state_bool_t increase_eye_relief;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public unsafe partial struct Tobii_wearable_advanced_eye_t
        {
            public Native.Tobii_validity_t gaze_origin_validity;
            
            public fixed float gaze_origin_mm_xyz[3];
            
            public Native.Tobii_validity_t gaze_direction_validity;
            
            public fixed float gaze_direction_normalized_xyz[3];
            
            public Native.Tobii_validity_t pupil_diameter_validity;
            
            public float pupil_diameter_mm;
            
            public Native.Tobii_validity_t pupil_position_in_sensor_area_validity;
            
            public fixed float pupil_position_in_sensor_area_xy[2];
            
            public Native.Tobii_validity_t position_guide_validity;
            
            public fixed float position_guide_xy[2];
            
            public Native.Tobii_validity_t blink_validity;
            
            public Native.Tobii_state_bool_t blink;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public unsafe partial struct Tobii_wearable_advanced_data_t
        {
            public long timestamp_tracker_us;
            
            public long timestamp_system_us;
            
            public Native.Tobii_wearable_advanced_eye_t left;
            
            public Native.Tobii_wearable_advanced_eye_t right;
            
            public Native.Tobii_validity_t gaze_origin_combined_validity;
            
            public fixed float gaze_origin_combined_mm_xyz[3];
            
            public Native.Tobii_validity_t gaze_direction_combined_validity;
            
            public fixed float gaze_direction_combined_normalized_xyz[3];
            
            public Native.Tobii_validity_t convergence_distance_validity;
            
            public float convergence_distance_mm;
            
            public Native.Tobii_state_bool_t improve_user_position_hmd;
            
            public Native.Tobii_state_bool_t increase_eye_relief;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public unsafe partial struct Tobii_lens_configuration_t
        {
            public fixed float left_xyz[3];
            
            public fixed float right_xyz[3];
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public unsafe partial struct Tobii_wearable_foveated_gaze_t
        {
            public long timestamp_us;
            
            public Native.Tobii_wearable_foveated_tracking_state_t tracking_state;
            
            public fixed float gaze_direction_combined_normalized_xyz[3];
        }
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Tobii_device_url_receiver_t([MarshalAs(UnmanagedType.LPStr)] string url, IntPtr user_data);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Tobii_data_receiver_t(IntPtr data, ulong size, IntPtr user_data);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Tobii_gaze_data_callback_t(in Native.Tobii_gaze_data_t gaze_data, IntPtr user_data);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Tobii_digital_syncport_callback_t(uint signal, long timestamp_tracker_us, long timestamp_system_us, IntPtr user_data);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Tobii_calibration_point_data_receiver_t(in Native.Tobii_calibration_point_data_t point_data, IntPtr user_data);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Tobii_output_frequency_receiver_t(float output_frequency, IntPtr user_data);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Tobii_gaze_point_callback_t(in Native.Tobii_gaze_point_t gaze_point, IntPtr user_data);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Tobii_gaze_origin_callback_t(in Native.Tobii_gaze_origin_t gaze_origin, IntPtr user_data);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Tobii_eye_position_normalized_callback_t(in Native.Tobii_eye_position_normalized_t eye_position, IntPtr user_data);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Tobii_user_presence_callback_t(Native.Tobii_user_presence_status_t status, long timestamp_us, IntPtr user_data);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Tobii_head_pose_callback_t(in Native.Tobii_head_pose_t head_pose, IntPtr user_data);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Tobii_notifications_callback_t(in Native.Tobii_notification_t notification, IntPtr user_data);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Tobii_user_position_guide_callback_t(in Native.Tobii_user_position_guide_t user_position_guide, IntPtr user_data);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Tobii_wearable_consumer_data_callback_t(in Native.Tobii_wearable_consumer_data_t data, IntPtr user_data);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Tobii_wearable_advanced_data_callback_t(in Native.Tobii_wearable_advanced_data_t data, IntPtr user_data);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Tobii_wearable_foveated_gaze_callback_t(in Native.Tobii_wearable_foveated_gaze_t data, IntPtr user_data);
        
        [DllImport(Library, EntryPoint = "tobii_error_message", CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.LPStr)]
        public static extern string Tobii_error_message(Native.Tobii_error_t error);
        
        [DllImport(Library, EntryPoint = "tobii_get_api_version", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_get_api_version(ref Native.Tobii_version_t version);
        
        [DllImport(Library, EntryPoint = "tobii_api_create", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_api_create(out Native.Tobii_api_t api, in Native.Tobii_custom_alloc_t custom_alloc, in Native.Tobii_custom_log_t custom_log);

        // Override
        [DllImport(Library, EntryPoint = "tobii_api_create", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_api_create(out Native.Tobii_api_t api, IntPtr customalloc, IntPtr customalloc2);

        [DllImport(Library, EntryPoint = "tobii_api_destroy", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_api_destroy(Native.Tobii_api_t api);
        
        [DllImport(Library, EntryPoint = "tobii_system_clock", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_system_clock(Native.Tobii_api_t api, ref long timestamp_us);
        
        [DllImport(Library, EntryPoint = "tobii_enumerate_local_device_urls", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_enumerate_local_device_urls(Native.Tobii_api_t api, Native.Tobii_device_url_receiver_t receiver, IntPtr user_data);
        
        [DllImport(Library, EntryPoint = "tobii_enumerate_local_device_urls_ex", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_enumerate_local_device_urls_ex(Native.Tobii_api_t api, Native.Tobii_device_url_receiver_t receiver, IntPtr user_data, uint device_generations);
        
        [DllImport(Library, EntryPoint = "tobii_wait_for_callbacks", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_wait_for_callbacks(int device_count, out Native.Tobii_device_t devices);
        
        [DllImport(Library, EntryPoint = "tobii_device_create", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_device_create(Native.Tobii_api_t api, [MarshalAs(UnmanagedType.LPStr)] string url, Native.Tobii_field_of_use_t field_of_use, out Native.Tobii_device_t device);
        
        [DllImport(Library, EntryPoint = "tobii_device_destroy", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_device_destroy(Native.Tobii_device_t device);
        
        [DllImport(Library, EntryPoint = "tobii_device_reconnect", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_device_reconnect(Native.Tobii_device_t device);
        
        [DllImport(Library, EntryPoint = "tobii_device_process_callbacks", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_device_process_callbacks(Native.Tobii_device_t device);
        
        [DllImport(Library, EntryPoint = "tobii_device_clear_callback_buffers", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_device_clear_callback_buffers(Native.Tobii_device_t device);
        
        [DllImport(Library, EntryPoint = "tobii_update_timesync", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_update_timesync(Native.Tobii_device_t device);
        
        [DllImport(Library, EntryPoint = "tobii_get_device_info", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_get_device_info(Native.Tobii_device_t device, ref Native.Tobii_device_info_t device_info);
        
        [DllImport(Library, EntryPoint = "tobii_get_track_box", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_get_track_box(Native.Tobii_device_t device, ref Native.Tobii_track_box_t track_box);
        
        [DllImport(Library, EntryPoint = "tobii_get_state_bool", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_get_state_bool(Native.Tobii_device_t device, Native.Tobii_state_t state, ref Native.Tobii_state_bool_t value);
        
        [DllImport(Library, EntryPoint = "tobii_get_state_uint32", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_get_state_uint32(Native.Tobii_device_t device, Native.Tobii_state_t state, ref uint value);
        
        [DllImport(Library, EntryPoint = "tobii_capability_supported", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_capability_supported(Native.Tobii_device_t device, Native.Tobii_capability_t capability, ref Native.Tobii_supported_t supported);
        
        [DllImport(Library, EntryPoint = "tobii_stream_supported", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_stream_supported(Native.Tobii_device_t device, Native.Tobii_stream_t stream, ref Native.Tobii_supported_t supported);
        
        [DllImport(Library, EntryPoint = "tobii_gaze_data_subscribe", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_gaze_data_subscribe(Native.Tobii_device_t device, Native.Tobii_gaze_data_callback_t callback, IntPtr user_data);
        
        [DllImport(Library, EntryPoint = "tobii_gaze_data_unsubscribe", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_gaze_data_unsubscribe(Native.Tobii_device_t device);
        
        [DllImport(Library, EntryPoint = "tobii_digital_syncport_subscribe", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_digital_syncport_subscribe(Native.Tobii_device_t device, Native.Tobii_digital_syncport_callback_t callback, IntPtr user_data);
        
        [DllImport(Library, EntryPoint = "tobii_digital_syncport_unsubscribe", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_digital_syncport_unsubscribe(Native.Tobii_device_t device);
        
        [DllImport(Library, EntryPoint = "tobii_timesync", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_timesync(Native.Tobii_device_t device, ref Native.Tobii_timesync_data_t timesync);
        
        [DllImport(Library, EntryPoint = "tobii_get_illumination_mode", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_get_illumination_mode(Native.Tobii_device_t device, ref string illumination_mode);
        
        [DllImport(Library, EntryPoint = "tobii_get_face_type", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_get_face_type(Native.Tobii_device_t device, ref string face_type);
        
        [DllImport(Library, EntryPoint = "tobii_set_enabled_eye", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_set_enabled_eye(Native.Tobii_device_t device, Native.Tobii_enabled_eye_t enabled_eye);
        
        [DllImport(Library, EntryPoint = "tobii_get_enabled_eye", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_get_enabled_eye(Native.Tobii_device_t device, ref Native.Tobii_enabled_eye_t enabled_eye);
        
        [DllImport(Library, EntryPoint = "tobii_calibration_start", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_calibration_start(Native.Tobii_device_t device, Native.Tobii_enabled_eye_t enabled_eye);
        
        [DllImport(Library, EntryPoint = "tobii_calibration_stop", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_calibration_stop(Native.Tobii_device_t device);
        
        [DllImport(Library, EntryPoint = "tobii_calibration_collect_data_2d", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_calibration_collect_data_2d(Native.Tobii_device_t device, float x, float y);
        
        [DllImport(Library, EntryPoint = "tobii_calibration_collect_data_3d", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_calibration_collect_data_3d(Native.Tobii_device_t device, float x, float y, float z);
        
        [DllImport(Library, EntryPoint = "tobii_calibration_collect_data_per_eye_2d", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_calibration_collect_data_per_eye_2d(Native.Tobii_device_t device, float x, float y, Native.Tobii_enabled_eye_t requested_eyes, ref Native.Tobii_enabled_eye_t collected_eyes);
        
        [DllImport(Library, EntryPoint = "tobii_calibration_discard_data_2d", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_calibration_discard_data_2d(Native.Tobii_device_t device, float x, float y);
        
        [DllImport(Library, EntryPoint = "tobii_calibration_discard_data_3d", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_calibration_discard_data_3d(Native.Tobii_device_t device, float x, float y, float z);
        
        [DllImport(Library, EntryPoint = "tobii_calibration_discard_data_per_eye_2d", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_calibration_discard_data_per_eye_2d(Native.Tobii_device_t device, float x, float y, Native.Tobii_enabled_eye_t eyes);
        
        [DllImport(Library, EntryPoint = "tobii_calibration_clear", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_calibration_clear(Native.Tobii_device_t device);
        
        [DllImport(Library, EntryPoint = "tobii_calibration_compute_and_apply", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_calibration_compute_and_apply(Native.Tobii_device_t device);
        
        [DllImport(Library, EntryPoint = "tobii_calibration_compute_and_apply_per_eye", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_calibration_compute_and_apply_per_eye(Native.Tobii_device_t device, ref Native.Tobii_enabled_eye_t calibrated_eyes);
        
        [DllImport(Library, EntryPoint = "tobii_calibration_retrieve", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_calibration_retrieve(Native.Tobii_device_t device, Native.Tobii_data_receiver_t receiver, IntPtr user_data);
        
        [DllImport(Library, EntryPoint = "tobii_calibration_parse", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_calibration_parse(Native.Tobii_api_t api, IntPtr data, ulong data_size, Native.Tobii_calibration_point_data_receiver_t receiver, IntPtr user_data);
        
        [DllImport(Library, EntryPoint = "tobii_calibration_apply", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_calibration_apply(Native.Tobii_device_t device, IntPtr data, ulong size);
        
        [DllImport(Library, EntryPoint = "tobii_get_geometry_mounting", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_get_geometry_mounting(Native.Tobii_device_t device, ref Native.Tobii_geometry_mounting_t geometry_mounting);
        
        [DllImport(Library, EntryPoint = "tobii_get_display_area", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_get_display_area(Native.Tobii_device_t device, ref Native.Tobii_display_area_t display_area);
        
        [DllImport(Library, EntryPoint = "tobii_set_display_area", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_set_display_area(Native.Tobii_device_t device, in Native.Tobii_display_area_t display_area);
        
        [DllImport(Library, EntryPoint = "tobii_calculate_display_area_basic", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_calculate_display_area_basic(Native.Tobii_api_t api, float width_mm, float height_mm, float offset_x_mm, in Native.Tobii_geometry_mounting_t geometry_mounting, ref Native.Tobii_display_area_t display_area);
        
        [DllImport(Library, EntryPoint = "tobii_get_device_name", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_get_device_name(Native.Tobii_device_t device, ref string device_name);
        
        [DllImport(Library, EntryPoint = "tobii_enumerate_output_frequencies", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_enumerate_output_frequencies(Native.Tobii_device_t device, Native.Tobii_output_frequency_receiver_t receiver, IntPtr user_data);
        
        [DllImport(Library, EntryPoint = "tobii_set_output_frequency", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_set_output_frequency(Native.Tobii_device_t device, float output_frequency);
        
        [DllImport(Library, EntryPoint = "tobii_get_output_frequency", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_get_output_frequency(Native.Tobii_device_t device, ref float output_frequency);
        
        [DllImport(Library, EntryPoint = "tobii_device_create_ex", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_device_create_ex(Native.Tobii_api_t api, [MarshalAs(UnmanagedType.LPStr)] string url, Native.Tobii_field_of_use_t field_of_use, in Native.Tobii_license_key_t license_keys, int license_count, ref Native.Tobii_license_validation_result_t license_results, out Native.Tobii_device_t device);
        
        [DllImport(Library, EntryPoint = "tobii_license_key_store", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_license_key_store(Native.Tobii_device_t device, IntPtr data, ulong size);
        
        [DllImport(Library, EntryPoint = "tobii_license_key_retrieve", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_license_key_retrieve(Native.Tobii_device_t device, Native.Tobii_data_receiver_t receiver, IntPtr user_data);
        
        [DllImport(Library, EntryPoint = "tobii_get_feature_group", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_get_feature_group(Native.Tobii_device_t device, ref Native.Tobii_feature_group_t feature_group);
        
        [DllImport(Library, EntryPoint = "tobii_gaze_point_subscribe", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_gaze_point_subscribe(Native.Tobii_device_t device, Native.Tobii_gaze_point_callback_t callback, IntPtr user_data);
        
        [DllImport(Library, EntryPoint = "tobii_gaze_point_unsubscribe", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_gaze_point_unsubscribe(Native.Tobii_device_t device);
        
        [DllImport(Library, EntryPoint = "tobii_gaze_origin_subscribe", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_gaze_origin_subscribe(Native.Tobii_device_t device, Native.Tobii_gaze_origin_callback_t callback, IntPtr user_data);
        
        [DllImport(Library, EntryPoint = "tobii_gaze_origin_unsubscribe", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_gaze_origin_unsubscribe(Native.Tobii_device_t device);
        
        [DllImport(Library, EntryPoint = "tobii_eye_position_normalized_subscribe", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_eye_position_normalized_subscribe(Native.Tobii_device_t device, Native.Tobii_eye_position_normalized_callback_t callback, IntPtr user_data);
        
        [DllImport(Library, EntryPoint = "tobii_eye_position_normalized_unsubscribe", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_eye_position_normalized_unsubscribe(Native.Tobii_device_t device);
        
        [DllImport(Library, EntryPoint = "tobii_user_presence_subscribe", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_user_presence_subscribe(Native.Tobii_device_t device, Native.Tobii_user_presence_callback_t callback, IntPtr user_data);
        
        [DllImport(Library, EntryPoint = "tobii_user_presence_unsubscribe", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_user_presence_unsubscribe(Native.Tobii_device_t device);
        
        [DllImport(Library, EntryPoint = "tobii_head_pose_subscribe", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_head_pose_subscribe(Native.Tobii_device_t device, Native.Tobii_head_pose_callback_t callback, IntPtr user_data);
        
        [DllImport(Library, EntryPoint = "tobii_head_pose_unsubscribe", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_head_pose_unsubscribe(Native.Tobii_device_t device);
        
        [DllImport(Library, EntryPoint = "tobii_notifications_subscribe", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_notifications_subscribe(Native.Tobii_device_t device, Native.Tobii_notifications_callback_t callback, IntPtr user_data);
        
        [DllImport(Library, EntryPoint = "tobii_notifications_unsubscribe", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_notifications_unsubscribe(Native.Tobii_device_t device);
        
        [DllImport(Library, EntryPoint = "tobii_user_position_guide_subscribe", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_user_position_guide_subscribe(Native.Tobii_device_t device, Native.Tobii_user_position_guide_callback_t callback, IntPtr user_data);
        
        [DllImport(Library, EntryPoint = "tobii_user_position_guide_unsubscribe", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_user_position_guide_unsubscribe(Native.Tobii_device_t device);
        
        [DllImport(Library, EntryPoint = "tobii_wearable_consumer_data_subscribe", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_wearable_consumer_data_subscribe(Native.Tobii_device_t device, Native.Tobii_wearable_consumer_data_callback_t callback, IntPtr user_data);
        
        [DllImport(Library, EntryPoint = "tobii_wearable_consumer_data_unsubscribe", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_wearable_consumer_data_unsubscribe(Native.Tobii_device_t device);
        
        [DllImport(Library, EntryPoint = "tobii_wearable_advanced_data_subscribe", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_wearable_advanced_data_subscribe(Native.Tobii_device_t device, Native.Tobii_wearable_advanced_data_callback_t callback, IntPtr user_data);
        
        [DllImport(Library, EntryPoint = "tobii_wearable_advanced_data_unsubscribe", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_wearable_advanced_data_unsubscribe(Native.Tobii_device_t device);
        
        [DllImport(Library, EntryPoint = "tobii_get_lens_configuration", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_get_lens_configuration(Native.Tobii_device_t device, ref Native.Tobii_lens_configuration_t lens_config);
        
        [DllImport(Library, EntryPoint = "tobii_set_lens_configuration", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_set_lens_configuration(Native.Tobii_device_t device, in Native.Tobii_lens_configuration_t lens_config);
        
        [DllImport(Library, EntryPoint = "tobii_lens_configuration_writable", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_lens_configuration_writable(Native.Tobii_device_t device, ref Native.Tobii_lens_configuration_writable_t writable);
        
        [DllImport(Library, EntryPoint = "tobii_wearable_foveated_gaze_subscribe", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_wearable_foveated_gaze_subscribe(Native.Tobii_device_t device, Native.Tobii_wearable_foveated_gaze_callback_t callback, IntPtr user_data);
        
        [DllImport(Library, EntryPoint = "tobii_wearable_foveated_gaze_unsubscribe", CallingConvention = CallingConvention.Cdecl)]
        public static extern Native.Tobii_error_t Tobii_wearable_foveated_gaze_unsubscribe(Native.Tobii_device_t device);
    }
}
